class ApplicationRecord < ::ActiveRecord::Base
  def self.generate_unique_id: (?length: Integer) -> String
end

class Game < ::ApplicationRecord
  extend ::ActiveRecord::Base::ClassMethods[::Game, ::Game::ActiveRecord_Relation, String]

  def self.loaded_questions: () -> ::Game::ActiveRecord_Relation

  def document: () -> String
  def document=: (String) -> String
  def kind: () -> Symbol
  def kind=: (Symbol) -> Symbol
  def parsed_document: () -> Hash[Symbol, untyped]
  def players: () -> ::Player::ActiveRecord_Associations_CollectionProxy
  def players=: (::Player::ActiveRecord_Associations_CollectionProxy | Array[::Player]) -> (::Player::ActiveRecord_Associations_CollectionProxy | Array[::Player])
  def player_ids: () -> Array[String]
  def player_ids=: (Array[String]) -> Array[String]

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    def loaded_questions: () -> ::Game::ActiveRecord_Relation

    include ::_ActiveRecord_Relation[::Game, String]
    include ::Enumerable[::Game]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::ActiveRecord::Relation::Methods[::Game, String]
  end
end

class Player < ::ApplicationRecord
  extend ::ActiveRecord::Base::ClassMethods[::Player, ::Player::ActiveRecord_Relation, String]

  MIN_NAME_LENGTH: Integer
  MAX_NAME_LENGTH: Integer

  def document: () -> String
  def document=: (String) -> String
  def document?: () -> bool
  def game: () -> ::Game
  def game=: (::Game) -> ::Game
  def game_id: () -> String
  def game_id=: (String) -> String
  def online?: () -> bool
  def name: () -> ::NormalizedString
  def name=: (_ToS) -> String
  def name?: () -> bool
  def parsed_document: () -> Hash[Symbol, untyped]
  def user: () -> ::User
  def user=: (::User) -> ::User
  def user_id: () -> String

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::_ActiveRecord_Relation[::Player, String]
    include ::Enumerable[::Player]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::ActiveRecord::Relation::Methods[::Player, String]
  end
end

class User < ::ApplicationRecord
  extend ::ActiveRecord::Base::ClassMethods[::User, ::User::ActiveRecord_Relation, String]

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::_ActiveRecord_Relation[::User, String]
    include ::Enumerable[::User]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::ActiveRecord::Relation::Methods[::User, String]
  end
end
