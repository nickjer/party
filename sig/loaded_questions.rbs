module LoadedQuestions
  class AnswerForm
    MIN_LENGTH: Integer
    MAX_LENGTH: Integer

    attr_reader answer: ::NormalizedString
    attr_reader errors: Hash[Symbol, String]

    def initialize: (?answer: _ToS?) -> void

    def valid?: () -> bool

    private

    def validate_length: (::NormalizedString value, min: Integer, max: Integer) -> String?
  end

  class Game
    type document = {
      hide_answers: bool,
      question: String,
      status: String,
    }

    def self.find: (String slug) -> Game

    def initialize: (::Game game) -> void

    def broadcast_reload_players: () -> void
    def hide_answers?: () -> bool
    def id: () -> Integer
    def player_for!: (::User) -> Player
    def player_for: (::User) -> Player?
    def players: () -> Array[Player]
    def question: () -> String
    def show_answers?: () -> bool
    def slug: () -> String
    def status: () -> Status
    def to_gid_param: () -> String

    private

    attr_reader game: ::Game

    def document: () -> document

    class Status
      def self.completed: () -> Status
      def self.matching: () -> Status
      def self.parse: (String status) -> Status
      def self.polling: () -> Status

      attr_reader status: Symbol

      def initialize: (Symbol status) -> void

      def ==: (Status other) -> bool
      def completed?: () -> bool
      def eql?: (Status other) -> bool
      def hash: () -> Integer
      def matching?: () -> bool
      def polling?: () -> bool
    end
  end

  class GamesController < ::ApplicationController
    @game: Game
    @new_game: NewGameForm
    @current_player: Player

    def new: () -> untyped
    def create: () -> untyped
    def show: () -> untyped

    private

    def new_game_params: () -> ::ActionController::Parameters
  end

  class NewGame
    def initialize: (
      user: ::User,
      player_name: ::NormalizedString,
      question: ::NormalizedString,
      hide_answers: bool
    ) -> void

    def build: () -> ::Game

    private

    attr_reader hide_answers: bool
    attr_reader player: NewPlayer
    attr_reader question: ::NormalizedString

    def document: () -> Game::document
  end

  class NewGameForm
    attr_reader errors: Hash[Symbol, String]
    attr_reader hide_answers: bool
    attr_reader player_name: ::NormalizedString
    attr_reader question: ::NormalizedString

    def initialize: (
      ?player_name: _ToS?,
      ?question: _ToS?,
      ?hide_answers: String?
    ) -> void

    def valid?: () -> bool

    private

    def validate_length: (::NormalizedString value, min: Integer, max: Integer) -> String?
  end

  class NewPlayer
    def initialize: (user: ::User, name: ::NormalizedString, guesser: bool) -> void

    def build: () -> ::Player

    private

    attr_reader guesser: bool
    attr_reader name: ::NormalizedString
    attr_reader user: ::User

    def document: () -> Player::document
  end

  class NewPlayerForm
    attr_reader errors: Hash[Symbol, String]
    attr_reader game: Game
    attr_reader name: ::NormalizedString

    def initialize: (game: Game, ?name: _ToS?) -> void

    def game_slug: () -> String
    def valid?: () -> bool

    private

    def validate_length: (::NormalizedString value, min: Integer, max: Integer) -> String?
  end

  class Player
    type document = {
      active: bool,
      answer: String,
      guesser: bool,
    }

    def initialize: (::Player player, game: Game) -> void

    def <=>: (Player other) -> Integer
    def ==: (Player other) -> bool
    def active?: () -> bool
    def answer: () -> ::NormalizedString
    def answered?: () -> bool
    def eql?: (Player other) -> bool
    def guesser?: () -> bool
    def hash: () -> Integer
    def id: () -> Integer
    def name: () -> ::NormalizedString
    def update_answer: (::NormalizedString answer) -> void
    def user: () -> ::User

    private

    attr_reader game: Game
    attr_reader player: ::Player

    def document: () -> document
  end

  class PlayersController < ::ApplicationController
    @current_player: Player
    @game: Game
    @new_player: NewPlayerForm

    def new: () -> untyped
    def create: () -> untyped
    def edit: () -> untyped
    def update: () -> untyped

    private

    def answer_params: () -> ::ActionController::Parameters
    def new_player_params: () -> ::ActionController::Parameters
    def redirect_to_game: (Game game) -> void
    def redirect_to_new_player: (Game game) -> void
  end
end
