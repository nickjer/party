interface _Online
  def online?: () -> bool
end

interface _ToGidParam
  def to_gid_param: () -> String
end

interface _ToModel
  def to_model: () -> ActiveRecord::Base
end

interface _ToParam
  def to_param: () -> String
end

class NormalizedString
  def initialize: (_ToS string) -> void

  def <=>: (NormalizedString other) -> Integer
  def ==: (NormalizedString other) -> bool
  def blank?: () -> bool
  def eql?: (NormalizedString other) -> bool
  def hash: () -> Integer
  def length: () -> Integer
  def sortable_value: () -> String
  def to_s: () -> String

  private

  attr_reader string: String

  def normalize: (_ToS value) -> String
end

class PlayerConnections
  include Singleton

  def self.instance: () -> PlayerConnections

  def initialize: () -> void

  def count: (Integer player_id) -> Integer
  def increment: (Integer player_id) -> Integer
  def decrement: (Integer player_id) -> Integer

  private

  attr_reader connection_map: Concurrent::Map[Integer, Integer]
end
