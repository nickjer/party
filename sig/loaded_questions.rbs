module LoadedQuestions
  class Game
    type document = {
      hide_answers: bool,
      question: String,
      status: String,
    }

    def self.find: (String slug) -> Game

    def initialize: (::Game game) -> void

    def hide_answers?: () -> bool
    def question: () -> String
    def show_answers?: () -> bool
    def status: () -> Symbol

    private

    attr_reader game: ::Game

    def document: () -> document
  end

  class GamesController < ::ApplicationController
    @game: Game
    @new_game: NewGameForm

    def new: () -> untyped
    def create: () -> untyped
    def show: () -> untyped

    private

    def new_game_params: () -> ::ActionController::Parameters
  end

  class NewGame
    def initialize: (
      user: ::User, player_name: String, question: String, hide_answers: bool
    ) -> void

    def build: () -> ::Game

    private

    attr_reader hide_answers: bool
    attr_reader player: NewPlayer
    attr_reader question: ::NormalizedString

    def document: () -> Game::document
  end

  class NewGameForm
    attr_reader player_name: String
    attr_reader question: String
    attr_reader hide_answers: bool
    attr_reader errors: Hash[Symbol, String]

    def initialize: (?::ActionController::Parameters? params) -> void

    def valid?: () -> bool

    private

    def validate_length: (String value, min: Integer, max: Integer) -> String?
  end

  class NewPlayer
    def initialize: (user: ::User, name: String, guesser: bool) -> void

    def build: () -> ::Player

    private

    attr_reader guesser: bool
    attr_reader name: ::NormalizedString
    attr_reader user: ::User

    def document: () -> Player::document
  end

  class Player
    type document = {
      active: bool,
      answer: String,
      guesser: bool,
    }

    def initialize: (::Player player, game: Game) -> void

    def active?: () -> bool
    def answer: () -> ::NormalizedString
    def guesser?: () -> bool
    def name: () -> String

    private

    attr_reader game: Game
    attr_reader player: ::Player

    def document: () -> document
  end
end
